function customLoginListener(emailAddress, password) {	//Need permission to read User class for new session.	var sessionRef = currentSession(); // Get session.	var promoteToken = sessionRef.promoteWith("admin"); //temporarily make this session Admin level.		var myUser = ds.User({email:emailAddress});	if (myUser === null) {		return false;	} else {		//we will handle login		if (myUser.validatePassword(password)) {			var theGroups = [];						switch (myUser.role) {				case "employee":				theGroups = ['Employee'];				break;						case "manager":				theGroups = ['Manager'];				break;												case "admin":				theGroups = ['Admin'];				break;			}						var connectTime = new Date();			return {				ID: myUser.ID,				name: myUser.email, //myUser.login,				fullName: myUser.fullName, 				belongsTo: theGroups,				storage: {time: connectTime}			}					} else {					return {error: 1024, errorMessage: "invalid login"};		}			}		sessionRef.unPromote(promoteToken); //put the session back to normal.} /*function customLoginListener(userName, password) {	var sessionRef = currentSession(); // Get session.	var promoteToken = sessionRef.promoteWith("Admin"); //temporarily make this session Admin level.			var myUser = ds.User.find("login = :1", userName);	if (myUser === null) {		return false;	} else {		if (myUser.validatePassword(password)) {									var theGroups = [];						switch (myUser.role) {				case "employee":				theGroups = ['Employee'];				break;						case "manager":				theGroups = ['Manager'];				break;												case "admin":				theGroups = ['Admin'];				break;			}									return {				ID: myUser.ID,				name: myUser.login,				fullName: myUser.fullName,				belongsTo: theGroups			}		} else {			return {error: 1024, errorMessage: "Invalid login."};		}	}		sessionRef.unPromote(promoteToken); //put the session back to normal.}*/